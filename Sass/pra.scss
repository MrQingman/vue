/*嵌套规则以及父选择器&  8.31demo*/

$color:red;
.aa p {
    color: $color;
    display: flex;
    transform: scale(45deg);
    width: 100px;
    height: 100px;
    &.redbox {
        background-color: #fff;
        background: #000;
    }
    body.box & {
        font-size: 10px;
    }
}


/*属性嵌套*/

.fonts {
    font: 20px/24px {
        family: '微软雅黑';
        size: 30em;
        weight: bold;
    }
    border: 2px {
        color: red;
        style: solid;
    }
}


/*!将 ! 作为多行注释的第一个字符表示在压缩输出模式下保留这条注释并输出到 CSS 文件中，通常用于添加版权信息。*/


/* 变量的用法 */

.var {
    $width: 400px !global; //局部变量转化为全局变量
    width: $width;
}

.test {
    width: $width;
}


/**--------------------------------------------------------------------------**/


/*
    数据类型
        数字 1,2,13,10px
        字符串，有引号字符串与无引号字符串,'taiqianqing'
        颜色,
        布尔类型
        空值 null
        数组 (list)，用空格或逗号作分隔符，1.5em 1em 0 2em, Helvetica, Arial, sans-serif
        maps, 相当于 JavaScript 的 object，(key1: value1, key2: value2)

*/


/**字符串中的特殊典例**/


/*在mixin混合器中使用*/

//使用 #{} (interpolation) 时，有引号字符串将被编译为无引号字符串，这样便于在 mixin 中引用选择器名：
@mixin str($selector) {
    body.prifixer #{$selector}:before {
        content: 'aa'
    }
}


/********数组类型********/


/*
数组 (lists) 指 Sass 如何处理 CSS 中 margin: 10px 15px 0 0 或者 font-face: Helvetica, Arial, sans-serif 这样通过空格或者逗号分隔的一系列的值。事实上，独立的值也被视为数组 —— 只包含一个值的数组。

数组本身没有太多功能，但 Sass list functions 赋予了数组更多新功能：nth 函数可以直接访问数组中的某一项；join 函数可以将多个数组连接在一起；append 函数可以在数组中添加新值；而 @each 指令能够遍历数组中的每一项。
*/


/***典例数组中包含子数组
10px 20px,11px 11px  子数组内的元素用空格隔开，子数组用逗号隔开
(10px 20px) (11px 11px) 内外两层数组使用相同分隔符，就用空格隔开
用 () 表示不包含任何值的空数组（在 Sass 3.3 版之后也视为空的 map）。空数组不可以直接编译成 CSS，比如编译 font-family: () Sass 将会报错
如果数组中包含空数组或空值，编译时将被清除，比如 1px 2px () 3px 或 1px 2px null 3px。

(1 2 3,) 包含以空格区分的数组的数组 
****/


/**--------------------------------------------------------------------------**/


/*****运算(operations)*******/


/*所有数据类型均支持相等运算==或!=*/


/**********数字运算***********/

//支持关系运算符<,>,>=,<=
//demo
p {
    width: 10pt+10px; //单位之间的运算会进行自动转换  优先级关系 以表达式第一个单位来进行转化
}


/*********除法运算******/

//三种情况 / 被视为除法运算

/*
1. 如果值，或值的一部分，是变量或者函数的返回值
2. 如果值被圆括号包裹
3. 如果值是算数表达式的一部分
**/

//demo
p {
    width: $width/2;
    width: round(1.5)/2;
    width: (500px/2);
    width: 10px+20px+8px/2px;
}

//特殊典例
//如果需要使用变量，同时又要确保 / 不做除法运算而是完整地编译到 CSS 文件中，只需要用 #{} 插值语句将变量包裹
//demo
p {
    $width: 10px;
    $line-height: 20px;
    height: #{$width}/#{$line-height};
}


/***颜色值运算***/

//通过r,g,b进行换算，具体参考https://www.sass.hk/docs/

/*******字符串运算*************/
/// +号用于连接字符串  连接的后编译字符有无引号类型有最左侧的字符串决定
$e:"love";
p {
    cursor: $e+-resize;
}
//运算表达式与其他值连用时，用空格作为连接符
p{
    margin : 3px + 4px auto;
}
//在有引号的文本字符串中使用#{}插值语句可以添加动态的值
//插入空值 作为空字符串
p::before{
    content: '呵呵#{4 + 5}呵额'
}


/******************布尔运算****************/
//SassScript 支持布尔型的 and or 以及 not 运算。

/**************数组不支持运算***************/





/***-----------------------------------------------------------------*******/
/************************圆括号Parentheses********************/
//可以影响运算顺序

/*****函数******/
//sass-script定义了多种函数



/****************插入语句**********/
//通过#{}插值语句可以再选择器或属性名中使用变量




/****变量定义!default*****/

$content:null;
$content:blue !default;

#main{
    content: $content;
}


/*******控制指令*******/
p{
    @if 1 + 1 == 2 {
        border: {
            width: 1px;
            color: red;
            style: solid;
        }
    }
    @if 5 > 3 {
        border: 0;
    }
    @if null {
        border: 3px;
    }
}

//@for
@for $i from 0 through 3 {
    itme-#{$i}{
        width: 2em*$i;
    }
}
@each $aa in aa,bb,vv,dd{
    .#{$aa}-icon{
        color: $aa;
    }
}
//super
@each $url,$color,$with in (pp,red,1px),(jj,blue,2px),(dd,green,3px){
    .#{$url}-icon{
        background-image: url('#{$url}.png');
        background-color: $color;
        width: $with;
    }
}
$p:6;
@while $p > 0{
    .item-#{$p}{
        width: 2em * $p;
    }
    $p:$p - 2;
}
$first: (
    key1: red,
    key2: blue
);
$theme-color: (
    default: (
        bgcolor:#fff,
        text-color: #ddd,
        link-color: #394
    ),
    primary: (
        bgcolor:red,
        text-color: #fff,
        link-color: blue        
    )
);
.add{
    color: map-get(map-get($theme-color,default),bgcolor);
    
};
$newmap: map-merge($first,$theme-color);
.bb{
    background:map-keys($newmap);
}

 @each $i in map-values($first) {
     .#{$i}-item{
          color: $i;
     }    
 }



//8.31-end
